"""
ATM System - Single File Procedural Version (MySQL)
Features:
- users table redesigned: account_no, name, phone, address, balance, fd_amount, pin_hash, created_at
- transaction_history table with proper DATETIME (txn_time)
- Admin can view users (PIN not shown), add, delete, update user data
- User menu includes FD options (open, close, view)
- Transactions recorded with txn_type and balance_after
- Pin stored as SHA-256 hash (simple and non-reversible)
- Minimal restructuring; purely procedural; single file
"""

import mysql.connector
from mysql.connector import Error
import hashlib
import getpass
from datetime import datetime

# ---------- CONFIG ----------
DB_CONFIG = {
    "host": "localhost",
    "user": "root",         # <- change to your mysql username
    "password": "",         # <- change to your mysql password
    "database": "atm_system"
}

# ---------- UTILS ----------
def hash_pin(pin: str) -> str:
    """Return hex sha256 hash of the pin (string)."""
    return hashlib.sha256(pin.encode('utf-8')).hexdigest()

def format_dt(dt):
    """Format datetime object to 'DD-MM-YYYY hh:mm:ss AM/PM'"""
    if dt is None:
        return ""
    return dt.strftime("%d-%m-%Y %I:%M:%S %p")

# ---------- DB CONNECTION & INIT ----------
def connect_db():
    try:
        conn = mysql.connector.connect(**DB_CONFIG)
        return conn
    except Error as e:
        print("❌ Database connection error:", e)
        return None

def init_db(conn):
    """Create required tables if they don't exist."""
    cursor = conn.cursor()
    users_sql = """
    CREATE TABLE IF NOT EXISTS users (
        user_id INT AUTO_INCREMENT PRIMARY KEY,
        account_no VARCHAR(20) UNIQUE NOT NULL,
        name VARCHAR(100) NOT NULL,
        phone VARCHAR(15),
        address VARCHAR(255),
        balance DECIMAL(12,2) DEFAULT 0.00,
        fd_amount DECIMAL(12,2) DEFAULT 0.00,
        pin_hash VARCHAR(255) NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    );
    """
    tx_sql = """
    CREATE TABLE IF NOT EXISTS transaction_history (
        txn_id INT AUTO_INCREMENT PRIMARY KEY,
        account_no VARCHAR(20) NOT NULL,
        txn_type ENUM('DEBIT','CREDIT','FD-CREATE','FD-CLOSE') NOT NULL,
        amount DECIMAL(12,2),
        balance_after DECIMAL(12,2),
        txn_time DATETIME DEFAULT CURRENT_TIMESTAMP
    );
    """
    admins_sql = """
    CREATE TABLE IF NOT EXISTS admins (
        admin_id VARCHAR(50) PRIMARY KEY,
        password VARCHAR(255) NOT NULL
    );
    """
    try:
        cursor.execute(users_sql)
        cursor.execute(tx_sql)
        cursor.execute(admins_sql)
        # Ensure at least one admin exists (default)
        cursor.execute("SELECT COUNT(*) FROM admins")
        cnt = cursor.fetchone()[0]
        if cnt == 0:
            cursor.execute("INSERT INTO admins (admin_id, password) VALUES (%s, %s)", ("admin", "admin123"))
            conn.commit()
    except Error as e:
        print("❌ Error initializing database:", e)
    finally:
        cursor.close()

# ---------- TRANSACTION LOGGING ----------
def log_transaction(conn, account_no, txn_type, amount, balance_after):
    cursor = conn.cursor()
    sql = "INSERT INTO transaction_history (account_no, txn_type, amount, balance_after) VALUES (%s, %s, %s, %s)"
    cursor.execute(sql, (account_no, txn_type, amount, balance_after))
    conn.commit()
    cursor.close()

# ---------- ADMIN FUNCTIONS ----------
def admin_login(conn):
    cursor = conn.cursor()
    admin_id = input("Admin ID: ").strip()
    password = getpass.getpass("Password: ")
    try:
        cursor.execute("SELECT * FROM admins WHERE admin_id=%s AND password=%s", (admin_id, password))
        if cursor.fetchone():
            print("✅ Admin login successful.")
            admin_menu(conn)
        else:
            print("❌ Invalid admin credentials.")
    except Error as e:
        print("❌ DB error:", e)
    finally:
        cursor.close()

def admin_menu(conn):
    while True:
        print("\n--- ADMIN MENU ---")
        print("1. View All Users")
        print("2. Add User")
        print("3. Delete User")
        print("4. Update User Data")
        print("5. Back to Main")
        ch = input("Choice: ").strip()
        if ch == '1':
            view_all_users(conn)
        elif ch == '2':
            add_user(conn)
        elif ch == '3':
            delete_user(conn)
        elif ch == '4':
            update_user_data(conn)
        elif ch == '5':
            break
        else:
            print("Invalid choice.")

def view_all_users(conn):
    cursor = conn.cursor(dictionary=True)
    try:
        cursor.execute("SELECT account_no, name, phone, address, balance, fd_amount, created_at FROM users")
        rows = cursor.fetchall()
        if not rows:
            print("No users found.")
            return
        print("\n--- USERS (PIN NOT SHOWN) ---")
        for r in rows:
            created = format_dt(r['created_at'])
            print(f"Acc: {r['account_no']} | Name: {r['name']} | Phone: {r['phone'] or '-'} | Address: {r['address'] or '-'} | Balance: ₹{r['balance']:.2f} | FD: ₹{r['fd_amount']:.2f} | Created: {created}")
    except Error as e:
        print("DB error:", e)
    finally:
        cursor.close()

def add_user(conn):
    cursor = conn.cursor()
    try:
        acc = input("New Account Number: ").strip()
        name = input("Full Name: ").strip()
        phone = input("Phone (optional): ").strip()
        address = input("Address (optional): ").strip()
        initial_bal = float(input("Initial balance (0 if none): ").strip() or 0)
        pin = getpass.getpass("Set 4-digit PIN: ").strip()
        pin_hash = hash_pin(pin)
        sql = "INSERT INTO users (account_no, name, phone, address, balance, pin_hash) VALUES (%s,%s,%s,%s,%s,%s)"
        cursor.execute(sql, (acc, name, phone or None, address or None, initial_bal, pin_hash))
        conn.commit()
        print("✅ User added.")
        # log initial credit if > 0
        if initial_bal > 0:
            log_transaction(conn, acc, "CREDIT", initial_bal, initial_bal)
    except Error as e:
        print("Error adding user:", e)
    finally:
        cursor.close()

def delete_user(conn):
    cursor = conn.cursor()
    acc = input("Account number to delete: ").strip()
    try:
        cursor.execute("DELETE FROM users WHERE account_no=%s", (acc,))
        if cursor.rowcount == 0:
            print("No such account.")
        else:
            conn.commit()
            print("✅ User deleted.")
    except Error as e:
        print("DB error:", e)
    finally:
        cursor.close()

def update_user_data(conn):
    cursor = conn.cursor()
    acc = input("Account number to update: ").strip()
    try:
        cursor.execute("SELECT account_no FROM users WHERE account_no=%s", (acc,))
        if not cursor.fetchone():
            print("Account not found.")
            return
        print("Update fields:")
        print("1. Name")
        print("2. Phone")
        print("3. Address")
        print("4. FD Amount (admin override)")
        choice = input("Choice: ").strip()
        if choice == '1':
            new = input("New name: ").strip()
            cursor.execute("UPDATE users SET name=%s WHERE account_no=%s", (new, acc))
        elif choice == '2':
            new = input("New phone: ").strip()
            cursor.execute("UPDATE users SET phone=%s WHERE account_no=%s", (new or None, acc))
        elif choice == '3':
            new = input("New address: ").strip()
            cursor.execute("UPDATE users SET address=%s WHERE account_no=%s", (new or None, acc))
        elif choice == '4':
            new_amt = float(input("Set FD amount (override): ").strip() or 0)
            cursor.execute("UPDATE users SET fd_amount=%s WHERE account_no=%s", (new_amt, acc))
        else:
            print("Invalid choice.")
            return
        conn.commit()
        print("✅ User data updated.")
    except Error as e:
        print("DB error:", e)
    finally:
        cursor.close()

# ---------- USER FUNCTIONS ----------
def user_login(conn):
    cursor = conn.cursor(dictionary=True)
    try:
        acc = input("Enter Account Number: ").strip()
        pin = getpass.getpass("Enter PIN: ").strip()
        pin_h = hash_pin(pin)
        cursor.execute("SELECT * FROM users WHERE account_no=%s AND pin_hash=%s", (acc, pin_h))
        row = cursor.fetchone()
        if row:
            print(f"✅ Welcome, {row['name']}!")
            user_menu(conn, acc)
        else:
            print("❌ Invalid account or PIN.")
    except Error as e:
        print("DB error:", e)
    finally:
        cursor.close()

def user_menu(conn, acc_no):
    while True:
        print("\n--- USER MENU ---")
        print("1. Check Balance")
        print("2. Deposit")
        print("3. Withdraw")
        print("4. FD Options")
        print("5. Transaction History")
        print("6. Logout")
        ch = input("Choice: ").strip()
        if ch == '1':
            check_balance(conn, acc_no)
        elif ch == '2':
            deposit(conn, acc_no)
        elif ch == '3':
            withdraw(conn, acc_no)
        elif ch == '4':
            fd_menu(conn, acc_no)
        elif ch == '5':
            show_transactions(conn, acc_no)
        elif ch == '6':
            print("Logged out.")
            break
        else:
            print("Invalid choice.")

def check_balance(conn, acc_no):
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT balance, fd_amount FROM users WHERE account_no=%s", (acc_no,))
        bal, fd = cursor.fetchone()
        print(f"Balance: ₹{bal:.2f} | FD: ₹{fd:.2f}")
    except Error as e:
        print("DB error:", e)
    finally:
        cursor.close()

def deposit(conn, acc_no):
    cursor = conn.cursor()
    try:
        amt = float(input("Amount to deposit: ").strip())
        cursor.execute("UPDATE users SET balance = balance + %s WHERE account_no=%s", (amt, acc_no))
        cursor.execute("SELECT balance FROM users WHERE account_no=%s", (acc_no,))
        new_bal = cursor.fetchone()[0]
        conn.commit()
        log_transaction(conn, acc_no, "CREDIT", amt, new_bal)
        print(f"✅ Deposited ₹{amt:.2f}. New balance ₹{new_bal:.2f}")
    except Error as e:
        print("DB error:", e)
    finally:
        cursor.close()

def withdraw(conn, acc_no):
    cursor = conn.cursor()
    try:
        amt = float(input("Amount to withdraw: ").strip())
        cursor.execute("SELECT balance FROM users WHERE account_no=%s", (acc_no,))
        bal = cursor.fetchone()[0]
        if amt <= 0:
            print("Amount must be positive.")
            return
        if amt <= bal:
            cursor.execute("UPDATE users SET balance = balance - %s WHERE account_no=%s", (amt, acc_no))
            cursor.execute("SELECT balance FROM users WHERE account_no=%s", (acc_no,))
            new_bal = cursor.fetchone()[0]
            conn.commit()
            log_transaction(conn, acc_no, "DEBIT", amt, new_bal)
            print(f"✅ Withdrawn ₹{amt:.2f}. New balance ₹{new_bal:.2f}")
        else:
            print("⚠️ Insufficient balance.")
    except Error as e:
        print("DB error:", e)
    finally:
        cursor.close()

# ---------- FD (Fixed Deposit) ----------
def fd_menu(conn, acc_no):
    while True:
        print("\n--- FD MENU ---")
        print("1. Open FD")
        print("2. Close FD")
        print("3. View FD Info")
        print("4. Back")
        ch = input("Choice: ").strip()
        if ch == '1':
            open_fd(conn, acc_no)
        elif ch == '2':
            close_fd(conn, acc_no)
        elif ch == '3':
            view_fd(conn, acc_no)
        elif ch == '4':
            break
        else:
            print("Invalid choice.")

def open_fd(conn, acc_no):
    cursor = conn.cursor()
    try:
        amt = float(input("FD amount to open: ").strip())
        if amt <= 0:
            print("Amount must be positive.")
            return
        # ensure sufficient balance
        cursor.execute("SELECT balance, fd_amount FROM users WHERE account_no=%s", (acc_no,))
        row = cursor.fetchone()
        if not row:
            print("Account not found.")
            return
        balance, fd_current = row
        if amt > balance:
            print("Insufficient balance to open FD.")
            return
        # Deduct from balance, add to fd_amount
        new_balance = balance - amt
        new_fd = fd_current + amt
        cursor.execute("UPDATE users SET balance=%s, fd_amount=%s WHERE account_no=%s", (new_balance, new_fd, acc_no))
        conn.commit()
        log_transaction(conn, acc_no, "FD-CREATE", amt, new_balance)
        print(f"✅ FD opened for ₹{amt:.2f}. New FD total: ₹{new_fd:.2f}. Balance: ₹{new_balance:.2f}")
    except Error as e:
        print("DB error:", e)
    finally:
        cursor.close()

def close_fd(conn, acc_no):
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT fd_amount, balance FROM users WHERE account_no=%s", (acc_no,))
        row = cursor.fetchone()
        if not row:
            print("Account not found.")
            return
        fd_amt, balance = row
        if fd_amt <= 0:
            print("No active FD to close.")
            return
        confirm = input(f"Close FD of ₹{fd_amt:.2f} and credit to balance? (y/n): ").strip().lower()
        if confirm != 'y':
            print("Cancelled.")
            return
        new_balance = balance + fd_amt
        cursor.execute("UPDATE users SET fd_amount=%s, balance=%s WHERE account_no=%s", (0.0, new_balance, acc_no))
        conn.commit()
        log_transaction(conn, acc_no, "FD-CLOSE", fd_amt, new_balance)
        print(f"✅ FD of ₹{fd_amt:.2f} closed. New balance: ₹{new_balance:.2f}")
    except Error as e:
        print("DB error:", e)
    finally:
        cursor.close()

def view_fd(conn, acc_no):
    cursor = conn.cursor()
    try:
        cursor.execute("SELECT fd_amount FROM users WHERE account_no=%s", (acc_no,))
        row = cursor.fetchone()
        if not row:
            print("Account not found.")
            return
        fd_amt = row[0]
        print(f"Current FD total: ₹{fd_amt:.2f}")
    except Error as e:
        print("DB error:", e)
    finally:
        cursor.close()

# ---------- TRANSACTION HISTORY DISPLAY ----------
def show_transactions(conn, acc_no, limit=10):
    cursor = conn.cursor(dictionary=True)
    try:
        cursor.execute("SELECT txn_id, txn_type, amount, balance_after, txn_time FROM transaction_history WHERE account_no=%s ORDER BY txn_time DESC LIMIT %s", (acc_no, limit))
        rows = cursor.fetchall()
        if not rows:
            print("No transactions found.")
            return
        print("\n--- Recent Transactions ---")
        for r in rows:
            t_str = format_dt(r['txn_time'])
            print(f"{t_str} | {r['txn_type']} | ₹{float(r['amount']):.2f} | Balance after: ₹{float(r['balance_after']):.2f}")
    except Error as e:
        print("DB error:", e)
    finally:
        cursor.close()

# ---------- MAIN MENU ----------
def main_menu(conn):
    while True:
        print("\n=== ATM SYSTEM ===")
        print("1. Admin Login")
        print("2. User Login")
        print("3. Exit")
        choice = input("Choice: ").strip()
        if choice == '1':
            admin_login(conn)
        elif choice == '2':
            user_login(conn)
        elif choice == '3':
            print("Goodbye.")
            break
        else:
            print("Invalid choice.")

# ---------- ENTRY POINT ----------
if __name__ == "__main__":
    connection = connect_db()
    if not connection:
        print("Unable to connect to DB. Update DB_CONFIG and ensure MySQL server is running.")
    else:
        init_db(connection)
        try:
            main_menu(connection)
        finally:
            connection.close()
